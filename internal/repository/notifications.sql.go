// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: notifications.sql

package repository

import (
	"context"
	"database/sql"
)

const insertNotification = `-- name: InsertNotification :one
INSERT INTO notifications (enabled, name, client_id, ignore_approved,
                           ignore_drafts, remind_authors, ignore_approved,
                           min_age, min_staleness, ignore_terms, ignore_labels,
                           require_labels,
                           monday,
                           tuesday,
                           wednesday,
                           thursday,
                           friday,
                           saturday,
                           sunday)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id
`

type InsertNotificationParams struct {
	Enabled          int64          `json:"enabled"`
	Name             string         `json:"name"`
	ClientID         int64          `json:"client_id"`
	IgnoreApproved   int64          `json:"ignore_approved"`
	IgnoreDrafts     int64          `json:"ignore_drafts"`
	RemindAuthors    int64          `json:"remind_authors"`
	IgnoreApproved_2 int64          `json:"ignore_approved_2"`
	MinAge           int64          `json:"min_age"`
	MinStaleness     int64          `json:"min_staleness"`
	IgnoreTerms      sql.NullString `json:"ignore_terms"`
	IgnoreLabels     sql.NullString `json:"ignore_labels"`
	RequireLabels    int64          `json:"require_labels"`
	Monday           int64          `json:"monday"`
	Tuesday          int64          `json:"tuesday"`
	Wednesday        int64          `json:"wednesday"`
	Thursday         int64          `json:"thursday"`
	Friday           int64          `json:"friday"`
	Saturday         int64          `json:"saturday"`
	Sunday           int64          `json:"sunday"`
}

func (q *Queries) InsertNotification(ctx context.Context, arg InsertNotificationParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertNotification,
		arg.Enabled,
		arg.Name,
		arg.ClientID,
		arg.IgnoreApproved,
		arg.IgnoreDrafts,
		arg.RemindAuthors,
		arg.IgnoreApproved_2,
		arg.MinAge,
		arg.MinStaleness,
		arg.IgnoreTerms,
		arg.IgnoreLabels,
		arg.RequireLabels,
		arg.Monday,
		arg.Tuesday,
		arg.Wednesday,
		arg.Thursday,
		arg.Friday,
		arg.Saturday,
		arg.Sunday,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertNotificationMattermost = `-- name: InsertNotificationMattermost :one
INSERT INTO notifications_mattermost (id, mattermost_channel, webhook_url)
VALUES (?, ?, ?)
RETURNING id
`

type InsertNotificationMattermostParams struct {
	ID                int64  `json:"id"`
	MattermostChannel string `json:"mattermost_channel"`
	WebhookUrl        string `json:"webhook_url"`
}

func (q *Queries) InsertNotificationMattermost(ctx context.Context, arg InsertNotificationMattermostParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertNotificationMattermost, arg.ID, arg.MattermostChannel, arg.WebhookUrl)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insetNotificationTimes = `-- name: InsetNotificationTimes :one
INSERT INTO notification_times (notification_id, scheduled_time)
VALUES (?, ?)
RETURNING id
`

type InsetNotificationTimesParams struct {
	NotificationID int64  `json:"notification_id"`
	ScheduledTime  string `json:"scheduled_time"`
}

func (q *Queries) InsetNotificationTimes(ctx context.Context, arg InsetNotificationTimesParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insetNotificationTimes, arg.NotificationID, arg.ScheduledTime)
	var id int64
	err := row.Scan(&id)
	return id, err
}
