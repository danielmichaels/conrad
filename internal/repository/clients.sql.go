// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: clients.sql

package repository

import (
	"context"
)

const getAllClients = `-- name: GetAllClients :many
SELECT id, name, created_at, updated_at, created_by, webhook_url, gitlab_url, interval, access_token
FROM gitlab_clients
`

func (q *Queries) GetAllClients(ctx context.Context) ([]GitlabClients, error) {
	rows, err := q.db.QueryContext(ctx, getAllClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GitlabClients{}
	for rows.Next() {
		var i GitlabClients
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.WebhookUrl,
			&i.GitlabUrl,
			&i.Interval,
			&i.AccessToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClientById = `-- name: GetClientById :one
SELECT id, name, created_at, updated_at, created_by, webhook_url, gitlab_url, interval, access_token
FROM gitlab_clients
WHERE id = ?
`

func (q *Queries) GetClientById(ctx context.Context, id int64) (GitlabClients, error) {
	row := q.db.QueryRowContext(ctx, getClientById, id)
	var i GitlabClients
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.WebhookUrl,
		&i.GitlabUrl,
		&i.Interval,
		&i.AccessToken,
	)
	return i, err
}

const insertClientRepo = `-- name: InsertClientRepo :exec
INSERT OR IGNORE INTO gitlab_repos
(name,repo_id, client_id)
VALUES (?,?,?)
`

type InsertClientRepoParams struct {
	Name     string `json:"name"`
	RepoID   int64  `json:"repo_id"`
	ClientID int64  `json:"client_id"`
}

func (q *Queries) InsertClientRepo(ctx context.Context, arg InsertClientRepoParams) error {
	_, err := q.db.ExecContext(ctx, insertClientRepo, arg.Name, arg.RepoID, arg.ClientID)
	return err
}

const insertNewClient = `-- name: InsertNewClient :one
INSERT INTO gitlab_clients
    (name, created_by, access_token, webhook_url, gitlab_url)
VALUES (?, ?, ?, ?, ?)
RETURNING id
`

type InsertNewClientParams struct {
	Name        string `json:"name"`
	CreatedBy   int64  `json:"created_by"`
	AccessToken string `json:"access_token"`
	WebhookUrl  string `json:"webhook_url"`
	GitlabUrl   string `json:"gitlab_url"`
}

func (q *Queries) InsertNewClient(ctx context.Context, arg InsertNewClientParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertNewClient,
		arg.Name,
		arg.CreatedBy,
		arg.AccessToken,
		arg.WebhookUrl,
		arg.GitlabUrl,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
